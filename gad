#!/usr/bin/python
"""
Group accessible directories - Allows a group of users read and/or write
  access to a directory tree, by setting the owners and ACL permissions
  apropriately.
"""
# Copyright (C) 2008 Fabian Knittel <fabian.knittel@avona.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA.

# Dependencies: simpleacl

import os
import sys
import grp
import pwd
import stat
import simpleacl
import os.path
from optparse import OptionParser


# Crude locking and global state.

def log_dbg(str):
    global debug
    if debug:
        sys.stderr.write('gad: debug: %s\n' % str)

def set_log_dbg(flag):
    global debug
    debug = flag

def set_simulate(flag):
    global simulate
    simulate = flag


class TreeModifier(object):
    """The tree modifier walks through a tree a modifies the file and directory
    permissions by calling a specified permission handler.

    The modifier supports recursive or non-recursive mode, a path ignore and an
    element ignore list."""

    def __init__(self, *args, **kwargs):
        self.tree_base = kwargs['tree_base']
        self.ignore_paths = kwargs['ignore_paths']
        self.ignore_elements = kwargs['ignore_elements']
        self.ignore_links = kwargs.get('ignore_links', True)
        self.ignore_base = kwargs.get('ignore_base', False)
        self.recursive = kwargs.get('recursive', True)

    def _is_path_ignored(self, path):
        """Determines whether the passed path matches an ignored directory
        or is a symbolic link (and we ignore symbolic links)."""
        if self.ignore_links and os.path.islink(path):
            return True
        for idir in self.ignore_paths:
            ipath = os.path.join(self.tree_base, idir)
            if ipath == path:
                return True
        return False

    def _filter_ignored_paths(self, root_path, names):
        """Filters out the ignored paths."""
        for name in names[:]:
            if name in self.ignore_elements or \
                    self._is_path_ignored(os.path.join(root_path, name)):
                names.remove(name)

    def apply(self, perm_handler):
        """Applies the passed permission handler perm_handler to all elements
        of the tree modifier's tree."""
        if not self.ignore_base:
            if os.path.isdir(self.tree_base):
                perm_handler.assert_dir_perms(self.tree_base)
            else:
                perm_handler.assert_file_perms(self.tree_base)
        if self.recursive and os.path.isdir(self.tree_base):
            for root, dirs, files in os.walk(self.tree_base):
                self._filter_ignored_paths(root, files)
                for name in files:
                    path = os.path.join(root, name)
                    perm_handler.assert_file_perms(path)

                self._filter_ignored_paths(root, dirs)
                for name in dirs:
                    path = os.path.join(root, name)
                    perm_handler.assert_dir_perms(path)


class StackedHandler(object):
    def __init__(self, handlers = None):
        if handlers is None:
            self.handlers = []
        else:
            self.handlers = handlers

    def append(self, *handlers):
        for handler in handlers:
            self.handlers.append(handler)

class StackedPermHandler(StackedHandler):
    """Forwards a permission handler request to a stored list of permission
    handlers. New permission handlers can be added via the append method."""

    def assert_file_perms(self, path):
        """Assert permissions on the file specified by path. Achieves this by
        calling all stored handlers."""
        for handler in self.handlers:
            handler.assert_file_perms(path)

    def assert_dir_perms(self, path):
        """Assert permissions on the directory specified by path. Achieves this
        by calling all stored handlers."""
        for handler in self.handlers:
            handler.assert_dir_perms(path)

class BaseAssertOwnerValid(object):
    def __init__(self, repl_name, names = []):
        # Replacement id
        self.repl_id = self._translate_name(repl_name)

        # Cache all valid ids of the safe names.
        self.safe_ids = set()
        self.safe_ids.add(self.repl_id)
        for name in names:
            self.safe_ids.add(self._translate_name(name))

    def _assert_owner(self, path):
        global simulate
        si = os.stat(path)
        si_member = getattr(si, self._STAT_NAME)
        if not si_member in self.safe_ids:
            log_dbg("Changing %s of %s from %d to %d" % (path, self._ID_NAME,
                    si_member, self.repl_id))
            if not simulate:
                self._perform(path, self.repl_id)

    # Handle both files and directories.
    assert_file_perms = _assert_owner
    assert_dir_perms = _assert_owner

class AssertUserOwnerValid(BaseAssertOwnerValid):
    """Makes sure that the file or directory user owner belongs to a list of
    list of users. If it doesn't, the owner is switched to a safe user."""

    # Name of the field in the stat structure.
    _STAT_NAME = 'st_uid'
    _ID_NAME = 'uid'

    def __init__(self, repl_user, users = []):
        BaseAssertOwnerValid.__init__(self, repl_name = repl_user,
                names = users)

    def _translate_name(self, user_name):
        return pwd.getpwnam(user_name).pw_uid

    def _perform(self, path, uid):
        return os.chown(path, uid, -1)

class AssertGroupOwnerValid(BaseAssertOwnerValid):
    """Makes sure that the file or directory group owner belongs to a list of
    groups. If it doesn't, the owner is switched to a safe group."""

    # Name of the field in the stat structure.
    _STAT_NAME = 'st_gid'
    _ID_NAME = 'gid'

    def __init__(self, repl_group, groups = []):
        BaseAssertOwnerValid.__init__(self, repl_name = repl_group,
                names = groups)

    def _translate_name(self, group_name):
        return grp.getgrnam(group_name).gr_gid

    def _perform(self, path, gid):
        return os.chown(path, -1, gid)

class AssertDirStickyGroup(object):
    """Makes sure that all directories have the group sticky bit set."""
    def assert_file_perms(self, path):
        pass

    def assert_dir_perms(self, path):
        global simulate
        si = os.stat(path)
        if not (stat.S_IMODE(si.st_mode) & stat.S_ISGID):
            log_dbg("Adding sticky gid to dir %s" % path)
            if not simulate:
                os.chmod(path, stat.S_IMODE(si.st_mode) | stat.S_ISGID)

class StackedAccessAclHandlers(StackedHandler):
    """
    """

    def assert_file_perms(self, path):
        global simulate
        curr_acl = simpleacl.SimpleAccessAcl(path)
        curr_acl.recalc_to_mask()
        updated = False
        for handler in self.handlers:
            updated |= handler.assert_acl_file_perms(curr_acl)
        if updated:
            curr_acl.calc_mask()
            log_dbg("updated ACL for file %s" % path)
            curr_acl.apply(simulate = simulate)

    def assert_dir_perms(self, path):
        global simulate
        curr_acl = simpleacl.SimpleAccessAcl(path)
        curr_acl.recalc_to_mask()
        updated = False
        for handler in self.handlers:
            updated |= handler.assert_acl_dir_perms(curr_acl)
        if updated:
            curr_acl.calc_mask()
            log_dbg("updated ACL for dir %s" % path)
            curr_acl.apply(simulate = simulate)

class StackedDefaultAclHandlers(StackedHandler):
    """
    """

    def assert_file_perms(self, path):
        # Files don't have default ACLs. Do nothing.
        pass

    def assert_dir_perms(self, path):
        global simulate
        curr_acl = simpleacl.SimpleDefaultAcl(path)
        curr_acl.recalc_to_mask()
        updated = False
        for handler in self.handlers:
            updated |= handler.assert_acl_dir_perms(curr_acl)
        if updated:
            curr_acl.calc_mask()
            log_dbg("updated default ACL for dir %s (%d)" % (path,
                    curr_acl.valid()))
            curr_acl.apply(simulate = simulate)

class AssertBasicValidAcl(object):
    def assert_acl_file_perms(self, curr_acl):
        return False

    def assert_acl_dir_perms(self, curr_acl):
        if curr_acl.valid():
            return False

        # By default, the owner should be able to do everything.
        entry = curr_acl.get_user_obj()
        entry.permset.add(simpleacl.ACL_READ)
        entry.permset.add(simpleacl.ACL_WRITE)
        entry.permset.add(simpleacl.ACL_EXECUTE)

        # Using the get methods assures that the elements exist.
        curr_acl.get_group_obj()
        curr_acl.get_other()

        return True

class BaseAssertPerms(object):
    """Makes sure that all permissions are set as requested."""

    def __init__(self, rnames = [], wnames = [], xnames = []):
        self.rids = self._getidsbyname(rnames)
        self.wids = self._getidsbyname(wnames)
        self.xids = self._getidsbyname(xnames)
        self.allids = set(self.rids + self.wids + self.xids)

    def assert_acl_perms(self, curr_acl):
        # We only add explicit entries for ids that arent' already present
        # as owner entries.
        si = os.stat(curr_acl.path)
        owner_id = getattr(si, self._STAT_NAME)
        relevant_ids = self.allids.difference(set([owner_id]))

        # Remove ids not part of the relevant ids.
        self._filter_ids(curr_acl, relevant_ids)

        owner_entry = self._get_owner_entry(curr_acl)
        for id in relevant_ids:
            perms = []
            # Use the owner's permissions as a permission mask for all others.
            if id in self.rids \
                    and owner_entry.permset.test(simpleacl.ACL_READ):
                perms.append(simpleacl.ACL_READ)
            if id in self.wids \
                    and owner_entry.permset.test(simpleacl.ACL_WRITE):
                perms.append(simpleacl.ACL_WRITE)
            if id in self.xids \
                    and owner_entry.permset.test(simpleacl.ACL_EXECUTE):
                perms.append(simpleacl.ACL_EXECUTE)
            self._get_entry(curr_acl, id).set_perms(perms = perms)

        return curr_acl.is_modified()

    assert_acl_file_perms = assert_acl_perms
    assert_acl_dir_perms = assert_acl_perms

class AssertGroupPerms(BaseAssertPerms):
    """Makes sure that all group permissions are set as requested."""

    _STAT_NAME = 'st_gid'

    def __init__(self, rgroups = [], wgroups = [], xgroups = []):
        BaseAssertPerms.__init__(self, rnames = rgroups, wnames = wgroups,
                xnames = xgroups)

    def _getidsbyname(self, groups):
        return map(lambda group_name: grp.getgrnam(group_name).gr_gid, groups)

    def _filter_ids(self, curr_acl, ids):
        curr_acl.filter_groups(ids)

    def _get_owner_entry(self, curr_acl):
        return curr_acl.get_group_obj()

    def _get_entry(self, curr_acl, gid):
        return curr_acl.get_group(gid)

class AssertUserPerms(BaseAssertPerms):
    """Makes sure that user permissions are set as requested."""

    _STAT_NAME = 'st_uid'

    def __init__(self, rusers = [], wusers = [], xusers = []):
        BaseAssertPerms.__init__(self, rnames = rusers, wnames = wusers,
                xnames = xusers)

    def _getidsbyname(self, users):
        return map(lambda user_name: pwd.getpwnam(user_name).pw_uid, users)

    def _filter_ids(self, curr_acl, ids):
        curr_acl.filter_users(ids)

    def _get_owner_entry(self, curr_acl):
        return curr_acl.get_user_obj()

    def _get_entry(self, curr_acl, uid):
        return curr_acl.get_user(uid)

class GroupOwnerEqualUserOwnerPerms(object):
    """Use the owner's permissions as a permission template for owner group."""

    def assert_acl_perms(self, curr_acl):
        user_owner = curr_acl.get_user_obj()
        group_owner = curr_acl.get_group_obj()
        group_owner.set_permbits(user_owner.get_permbits())
        return curr_acl.is_modified()

    assert_acl_file_perms = assert_acl_perms
    assert_acl_dir_perms = assert_acl_perms

class NoOtherPerms(object):
    """Others should not be able to do anything."""

    def assert_acl_perms(self, curr_acl):
        entry = curr_acl.get_other()
        entry.set_perms([])

        return curr_acl.is_modified()

    assert_acl_file_perms = assert_acl_perms
    assert_acl_dir_perms = assert_acl_perms


def get_groups_members(groups):
    return reduce(lambda x, y: x + y,
            map(lambda gr_nam: grp.getgrnam(gr_nam).gr_mem, groups), [])

def make_tree_accessible(tree_base,
        xgroups = [], wgroups = [], wxgroups = [], rgroups = [], rxgroups = [],
        rwgroups = [], rwxgroups = [],
        xusers = [], wusers = [], wxusers = [], rusers = [], rxusers = [],
        rwusers = [], rwxusers = [],
        safe_user = None, safe_group = None,
        ignore_paths = [], ignore_elements = [],
        ignore_links = True, ignore_base = False, recursive = True,
        group_sticky = True):
    global simulate
    if simulate:
        log_dbg('only simulating commands for %s' % tree_base)

    # Calculate r, w and x groups from convenience group lists.
    rgroups = set(rgroups + rxgroups + rwgroups + rwxgroups)
    wgroups = set(wgroups + wxgroups + rwgroups + rwxgroups)
    xgroups = set(xgroups + wxgroups + rxgroups + rwxgroups)
    del(wxgroups, rxgroups, rwgroups, rwxgroups)

    # Calculate r, w and x user from convenience user lists.
    rusers = set(rusers + rxusers + rwusers + rwxusers)
    wusers = set(wusers + wxusers + rwusers + rwxusers)
    xusers = set(xusers + wxusers + rxusers + rwxusers)
    del(wxusers, rxusers, rwusers, rwxusers)


    sph = StackedPermHandler()

    if safe_user is not None:
        # Make sure that all files/dirs are owned by a sensible user.
        sph.append(AssertUserOwnerValid(repl_user = safe_user,
                users = wusers.union(get_groups_members(wgroups))))

    if safe_group is not None:
        # Make sure that all files/dirs are owned by a sensible group.
        sph.append(AssertGroupOwnerValid(repl_group = safe_group,
                groups = wgroups))

    if group_sticky:
        # Make the owner group sticky on directories?
        sph.append(AssertDirStickyGroup())

    common_perms = [
            AssertUserPerms(rusers = rusers, wusers = wusers, xusers = xusers),
            GroupOwnerEqualUserOwnerPerms(),
            AssertGroupPerms(rgroups = rgroups, wgroups = wgroups,
                    xgroups = xgroups),
            NoOtherPerms() ]

    sdah = StackedDefaultAclHandlers()
    sdah.append(AssertBasicValidAcl())
    sdah.append(*common_perms)

    sph.append(sdah)
    saah = StackedAccessAclHandlers()
    saah.append(*common_perms)
    sph.append(saah)

    tm = TreeModifier(tree_base = tree_base, ignore_paths = ignore_paths,
            ignore_elements = ignore_elements, ignore_links = ignore_links,
            ignore_base = ignore_base, recursive = recursive)
    tm.apply(sph)


def process_config_file(file):
    log_dbg('processing %s' % file)
    # Dictionary of all methods available to the configuration file.
    available = {
            'make_tree_accessible': make_tree_accessible,
            'set_log_dbg': set_log_dbg,
            'set_simulate': set_simulate,
            }
    execfile(file, available)

def main():
    global debug
    global simulate

    parser = OptionParser("usage: %prog [options] config-files..")
    parser.add_option("-d", "--debug",
            action = "store_true", dest = "debug",
            help = "enable debugging output",
            default = False)
    parser.add_option("-s", "--simulate",
            action = "store_true", dest = "simulate",
            help = "only simulate the actions",
            default = False)
    (options, args) = parser.parse_args()
    if len(args) == 0:
        parser.error("need at least one configuration file to run")
    simulate = options.simulate
    debug = options.debug

    for conf_file in args:
        process_config_file(conf_file)

if __name__ == '__main__':
    main()

# vim:set tabstop=8 softtabstop=4 shiftwidth=4 et:
